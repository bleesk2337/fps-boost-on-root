#onlyrootles
#mt manager
import base64
import requests
import subprocess
import os

print("–æ–∂–∏–¥–∞–π—Ç–µ...")

ENCRYPTED_KEY_B64 = "ZGxfRHZcZ0ZXZhBMb1xuYRJwVEhDQktqT1UcS2hsQ3FRc1ZfQkZO==" 
XOR_KEY = 37  

def decrypt_key(encoded_key, xor_key):
    encrypted_bytes = base64.b64decode(encoded_key)
    return ''.join([chr(b ^ xor_key) for b in encrypted_bytes])

GEMINI_API_KEY = decrypt_key(ENCRYPTED_KEY_B64, XOR_KEY)


def get_device_info():
    try:
        cpu = subprocess.check_output(["adb", "shell", "cat", "/proc/cpuinfo"]).decode()
        mem = subprocess.check_output(["adb", "shell", "free", "-h"]).decode()
        android_ver = subprocess.check_output(["adb", "shell", "getprop", "ro.build.version.release"]).decode().strip()
        device = subprocess.check_output(["adb", "shell", "getprop", "ro.product.model"]).decode().strip()
        root_status = subprocess.check_output(["adb", "shell", "id"]).decode()

        return f"""
üê†DEVICE: {device}
üëÅndroid Version: {android_ver}
ü††CPU Info:
{cpu}
üíæ Memory:
{mem}
üê† Root Status:
{root_status}
"""
    except Exception as e:
        return f" failee!: {e}"


os.makedirs("logs", exist_ok=True)
log_text = get_device_info()
with open("logs/diagnostic_log.txt", "w", encoding="utf-8") as f:
    f.write(log_text)


headers = {
    "Content-Type": "application/json",
    "X-goog-api-key": GEMINI_API_KEY
}


example_script = """
#!/system/bin/sh

LOG="/sdcard/fps_boost_log.txt"
echo "üöÄ FPS BOOSTER v2 STARTED" > $LOG

# –ü—Ä–æ–≤–µ—Ä–∫–∞ root
if [ "$(id -u)" -ne 0 ]; then
  echo "‚ùå root root!" >> $LOG
  exit 1
fi


echo "üìä BEFORE:" >> $LOG
echo "Memory:" >> $LOG
free -h >> $LOG
echo "---" >> $LOG
top -n 1 -m 5 | grep -v idle >> $LOG

### === 2. –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∏ —Ñ–æ–Ω–∞ ===
echo "üßπ Cleaning..." >> $LOG
sync; echo 3 > /proc/sys/vm/drop_caches
killall -9 com.miui.analytics com.xiaomi.finddevice com.miui.msa.global >/dev/null 2>&1
echo "‚úÖ RAM Cleared" >> $LOG

### === 3. GPU Performance —Ä–µ–∂–∏–º ===
for cpu in /sys/devices/system/cpu/cpu[0-9]*; do
  echo "performance" > $cpu/cpufreq/scaling_governor 2>/dev/null
done
echo "‚úÖ CPU governor set" >> $LOG

### === 4. Thermal –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ===
if [ -f /sys/class/thermal/thermal_message/sconfig ]; then
  echo "disabled" > /sys/class/thermal/thermal_message/sconfig
  echo "‚úÖ Thermal control off" >> $LOG
fi

### === 5. –î–≤–æ–π–Ω–æ–π SWAP: 520–ú–ë + 956–ú–ë ===
echo "üíæ Setting up SWAP..." >> $LOG
SWAP1="/data/swap1"
SWAP2="/data/swap2"

[ ! -f "$SWAP1" ] && dd if=/dev/zero of=$SWAP1 bs=1M count=520 && mkswap $SWAP1
[ ! -f "$SWAP2" ] && dd if=/dev/zero of=$SWAP2 bs=1M count=956 && mkswap $SWAP2

swapon $SWAP1
swapon $SWAP2
echo "‚úÖ SWAP active" >> $LOG

### === 6. –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–≤–∏–∫–∏: —Ñ–∏–ª—å—Ç—Ä—ã, —Ä–µ–Ω–¥–µ—Ä, anti-alias ===
setprop debug.hwui.disable_scissor_opt true
setprop debug.hwui.renderer opengl
setprop debug.egl.swapinterval 0
setprop persist.sys.ui.hw true
setprop persist.sys.render_type opengles2
setprop ro.opengles.version 131072  # = 2.0

echo "‚úÖ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã OFF, OpenGL 2.0 –≤–∫–ª—é—á—ë–Ω" >> $LOG

### === 7. –ß–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏ –∏–≥—Ä ===
rm -rf /data/data/com.android.chrome/cache/*
rm -rf /data/data/org.mozilla.firefox/cache/*
rm -rf /data/data/net.kdt.pojavlaunch/cache/*
echo "‚úÖ Game/browser cache cleared" >> $LOG

### === 8. I/O —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∏ MIP OFF (—Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏) ===
echo 128 > /sys/block/mmcblk0/queue/read_ahead_kb 2>/dev/null
echo noop > /sys/block/mmcblk0/queue/scheduler 2>/dev/null

### === 9. –ü–û–°–õ–ï ===
echo "\nüìà AFTER:" >> $LOG
echo "Memory:" >> $LOG
free -h >> $LOG
echo "---" >> $LOG
top -n 1 -m 5 | grep -v idle >> $LOG

echo "\n‚úÖ BOOST COMPLETE!" >> $LOG
cat $LOG
"""


prompt = f"""
–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ root-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Android. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π .sh —Å–∫—Ä–∏–ø—Ç –¥–ª—è FPS Boost, Game Mode, SWAP, RAM –æ—á–∏—Å—Ç–∫–∏, thermal tweak –∏ GPU —É—Å–∫–æ—Ä–µ–Ω–∏—è.  
–ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ .sh –∫–æ–¥. –ë–µ–∑ markdown, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ò–ò.  
–°–ª–µ–¥—É–π —Å—Ç–∏–ª—é —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞:
{example_script}

üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:
{log_text}
"""

# ‚úâÔ∏è –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
payload = {
    "contents": [
        {
            "parts": [{"text": prompt}]
        }
    ]
}

response = requests.post(
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
    headers=headers,
    json=payload
)

if response.status_code != 200:
    print("‚ùå –û—à–∏–±–∫–∞ Gemini:", response.status_code)
    print(response.text)
    exit()

sh_code = response.json()["candidates"][0]["content"]["parts"][0]["text"]
os.makedirs("results", exist_ok=True)
with open("results/auto_boost.sh", "w", encoding="utf-8") as f:
    f.write(sh_code)

print(" –°–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω/script saved: results/auto_boost.sh")
